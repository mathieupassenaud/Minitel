.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Twitter 3"
.TH Net::Twitter 3 "2009-03-25" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Twitter \- Perl interface to twitter.com
.SH "VERSION"
.IX Header "VERSION"
This document describes Net::Twitter version 2.12
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   #!/usr/bin/perl
\&
\&   use Net::Twitter;
\&
\&   my $twit = Net::Twitter\->new({username=>"myuser", password=>"mypass" });
\&
\&   my $result = $twit\->update({status => "My current Status"});
\&
\&   my $twit\->credentials("otheruser", "otherpass");
\&
\&   my $result = $twit\->update({status => "Status for otheruser"});
\&
\&   my $result = $twitter\->search(\*(AqAlbi the racist dragon\*(Aq);
\&
\&   foreach my $tweet (@{ $results }) {
\&     my $speaker =  $tweet\->{from_user};
\&     my $text = $tweet\->{text};
\&     my $time = $tweet\->{created_at};
\&     print "$time <$speaker> $text\en";
\&   }
\&
\&    my $steve = $twitter\->search(\*(AqSteve\*(Aq);
\&    $twitter\->update($steve .\*(Aq? Who is steve?\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
http://www.twitter.com provides a web 2.0 type of ubiquitous presence.
This module allows you to set your status, as well as review the statuses of
your friends.
.PP
You can view the latest status of Net::Twitter on it's own twitter timeline
at http://twitter.com/net_twitter
.SH "METHODS AND ARGUMENTS"
.IX Header "METHODS AND ARGUMENTS"
Listed below are the methods available through the object.
.PP
Please note that any method that takes a hashref as an argument must be called
in the form:
.PP
.Vb 1
\&    $twit\->method({arg => "value"});
\&
\&    and not
\&
\&    $twit\->method(arg => "value");
.Ve
.PP
If the curly brackets around the arguments are missing, the code which implements the
convenience methods allowing you to specify a single argument as a string will interpret
\&\*(L"arg\*(R" as your argument.
.ie n .IP """new(...)""" 4
.el .IP "\f(CWnew(...)\fR" 4
.IX Item "new(...)"
You must supply a hash containing the configuration for the connection.
.Sp
Valid configuration items are:
.RS 4
.ie n .IP """username""" 4
.el .IP "\f(CWusername\fR" 4
.IX Item "username"
Username of your account at twitter.com. This is usually your email address.
\&\*(L"user\*(R" is an alias for \*(L"username\*(R".  \s-1REQUIRED\s0.
.ie n .IP """password""" 4
.el .IP "\f(CWpassword\fR" 4
.IX Item "password"
Password of your account at twitter.com. \*(L"pass\*(R" is an alias for \*(L"password\*(R"
\&\s-1REQUIRED\s0.
.ie n .IP """useragent""" 4
.el .IP "\f(CWuseragent\fR" 4
.IX Item "useragent"
\&\s-1OPTIONAL:\s0 Sets the User Agent header in the \s-1HTTP\s0 request. If omitted, this will default to
\&\*(L"Net::Twitter/$Net::Twitter::Version (Perl)\*(R"
.ie n .IP """useragent_class""" 4
.el .IP "\f(CWuseragent_class\fR" 4
.IX Item "useragent_class"
\&\s-1OPTIONAL:\s0 An LWP::UserAgent compatible class, e.g., LWP::UserAgent::POE.
If omitted, this will default to LWP::UserAgent.
.ie n .IP """useragent_args""" 4
.el .IP "\f(CWuseragent_args\fR" 4
.IX Item "useragent_args"
\&\s-1OPTIONAL:\s0 A hashref passed to this option will be passed along to the UserAgent \f(CW\*(C`new()\*(C'\fR 
call to specify its configuration. This will pass to whatever class is passed in 
\&\f(CW\*(C`useragent_class\*(C'\fR, if any. See the \s-1POD\s0 for LWP::UserAgent for details.
.Sp
\&\s-1NOTE:\s0 Any value passed in this hashref for \*(L"agent\*(R" will be overwritten. If setting the
useragent is necessary, use the \f(CW\*(C`useragent\*(C'\fR option to \f(CW\*(C`new()\*(C'\fR
.ie n .IP """no_fallback""" 4
.el .IP "\f(CWno_fallback\fR" 4
.IX Item "no_fallback"
\&\s-1OPTIONAL:\s0 If a \f(CW\*(C`useragent_class\*(C'\fR is specified but fails to load, the default behavior is
to warn and fall back to using regular LWP::UserAgent. If \f(CW\*(C`no_fallback\*(C'\fR is set to a boolean true
value, the \f(CW\*(C`new\*(C'\fR method will cause the code to \f(CW\*(C`die\*(C'\fR
.ie n .IP """source""" 4
.el .IP "\f(CWsource\fR" 4
.IX Item "source"
\&\s-1OPTIONAL:\s0 Sets the source name, so messages will appear as \*(L"from <source>\*(R" instead
of \*(L"from web\*(R". Defaults to displaying \*(L"Perl Net::Twitter\*(R". Note: see Twitter \s-1FAQ\s0,
your client source needs to be included at twitter manually.
.Sp
This value will be a code which is assigned to you by Twitter. For example, the
default value is \*(L"twitterpm\*(R", which causes Twitter to display the \*(L"from Perl
Net::Twitter\*(R" in your timeline.
.Sp
Twitter claims that specifying a nonexistant code will cause the system to default to
\&\*(L"from web\*(R". If you don't have a code from twitter, don't set one.
.ie n .IP """clientname""" 4
.el .IP "\f(CWclientname\fR" 4
.IX Item "clientname"
\&\s-1OPTIONAL:\s0 Sets the X\-Twitter-Client-Name: \s-1HTTP\s0 Header. If omitted, this defaults to
\&\*(L"Perl Net::Twitter\*(R"
.ie n .IP """clientver""" 4
.el .IP "\f(CWclientver\fR" 4
.IX Item "clientver"
\&\s-1OPTIONAL:\s0 Sets the X\-Twitter-Client-Version: \s-1HTTP\s0 Header. If omitted, this defaults to
the current Net::Twitter version, \f(CW$Net::Twitter::VERSION\fR.
.ie n .IP """clienturl""" 4
.el .IP "\f(CWclienturl\fR" 4
.IX Item "clienturl"
\&\s-1OPTIONAL:\s0 Sets the X\-Twitter-Client-URL: \s-1HTTP\s0 Header. If omitted, this defaults to
\&\f(CW\*(C`http://www.net\-twitter.info\*(C'\fR.
.ie n .IP """apiurl""" 4
.el .IP "\f(CWapiurl\fR" 4
.IX Item "apiurl"
\&\s-1OPTIONAL\s0. The \s-1URL\s0 of the \s-1API\s0 for twitter.com. This defaults to 
\&\f(CW\*(C`http://twitter.com/\*(C'\fR if not set.
.ie n .IP """apihost""" 4
.el .IP "\f(CWapihost\fR" 4
.IX Item "apihost"
.PD 0
.ie n .IP """apirealm""" 4
.el .IP "\f(CWapirealm\fR" 4
.IX Item "apirealm"
.PD
\&\s-1OPTIONAL:\s0 If you do point to a different \s-1URL\s0, you will also need to set \f(CW\*(C`apihost\*(C'\fR and
\&\f(CW\*(C`apirealm\*(C'\fR so that the internal \s-1LWP\s0 can authenticate.
.Sp
\&\f(CW\*(C`apihost\*(C'\fR defaults to \f(CW\*(C`www.twitter.com:80\*(C'\fR.
.Sp
\&\f(CW\*(C`apirealm\*(C'\fR defaults to \f(CW\*(C`Twitter API\*(C'\fR.
.ie n .IP """identica""" 4
.el .IP "\f(CWidentica\fR" 4
.IX Item "identica"
\&\s-1OPTIONAL:\s0 Passing a true value for identica to \fInew()\fR will preset values for \f(CW\*(C`apiurl\*(C'\fR, \f(CW\*(C`apirealm\*(C'\fR and
\&\f(CW\*(C`apihost\*(C'\fR which will point at the http://identi.ca twitter compatible \s-1API\s0.
.Sp
All methods in Net::Twitter work as documented, except where listed in the 
identica/laconica documentation at:
.Sp
<http://laconi.ca/trac/wiki/TwitterCompatibleAPI>
.Sp
For simplicity, you can also use Net::Identica in your script instead of Net::Twitter, which
will default to identica being set to true.
.ie n .IP """twittervision""" 4
.el .IP "\f(CWtwittervision\fR" 4
.IX Item "twittervision"
\&\s-1OPTIONAL:\s0 If the \f(CW\*(C`twittervision\*(C'\fR argument is passed with a true value, the
module will enable use of the <http://www.twittervision.com> \s-1API\s0. If
enabled, the \f(CW\*(C`show_user\*(C'\fR method will include relevant location data in
its response hashref. Also, the \f(CW\*(C`update_twittervision\*(C'\fR method will
allow setting of the current location.
.ie n .IP """skip_arg_validation""" 4
.el .IP "\f(CWskip_arg_validation\fR" 4
.IX Item "skip_arg_validation"
\&\s-1OPTIONAL:\s0 Beginning in 2.00, Net::Twitter will validate arguments passed to the various \s-1API\s0 methods, 
flagging required args that were not passed, and discarding args passed that do not exist in the \s-1API\s0 
specification. Passing a boolean True for skip_arg_validation into \fInew()\fR will skip this validation
process entirely and allow requests to proceed regardless of the args passed. This defaults to false.
.ie n .IP """die_on_validation""" 4
.el .IP "\f(CWdie_on_validation\fR" 4
.IX Item "die_on_validation"
\&\s-1OPTIONAL:\s0 In the event that the arguments passed to a method do not pass the validation process listed
above, the default action will be to warn the user, make the error readable through the get_error method
listed below, and to return undef to the caller. Passing a boolean true value for die_on_validation to
\&\fInew()\fR will change this behavior to simply executing a \fIdie()\fR with the appropriate error message. This
defaults to false.
.ie n .IP """arrayref_on_error""" 4
.el .IP "\f(CWarrayref_on_error\fR" 4
.IX Item "arrayref_on_error"
\&\s-1OPTIONAL:\s0 By default any methods which find an error, whether from twitter or from bad args, will 
return undef. Passing \f(CW\*(C`arrayref_on_error\*(C'\fR as a boolean \s-1TRUE\s0 to \fInew()\fR will cause all error states to
return an empty arrayref instead. As most successful responses are in the form of arrayrefs, this will
cause a uniform response type for all calls. All error messages and codes are still available with
methods such as \f(CW\*(C`get_error\*(C'\fR.
.RE
.RS 4
.RE
.ie n .IP """clone()""" 4
.el .IP "\f(CWclone()\fR" 4
.IX Item "clone()"
Returns a shallow copy of the Net::Twitter object. This can be used when Net::Twitter is used in 
a Parallel or Asynchronous framework to enable easier access to returned error values. All clones share
the same LWP::UserAgent object, so calling \f(CW\*(C`credentials()\*(C'\fR will change the login credentials of all
clones.
.ie n .IP """credentials($username, $password, $apihost, $apiurl)""" 4
.el .IP "\f(CWcredentials($username, $password, $apihost, $apiurl)\fR" 4
.IX Item "credentials($username, $password, $apihost, $apiurl)"
Change the credentials for logging into twitter. This is helpful when managing
multiple accounts.
.Sp
\&\f(CW\*(C`apirealm\*(C'\fR and \f(CW\*(C`apihost\*(C'\fR are optional and will default to the existing settings if omitted.
.ie n .IP """http_code""" 4
.el .IP "\f(CWhttp_code\fR" 4
.IX Item "http_code"
Returns the \s-1HTTP\s0 response code of the most recent request.
.ie n .IP """http_message""" 4
.el .IP "\f(CWhttp_message\fR" 4
.IX Item "http_message"
Returns the \s-1HTTP\s0 response message of the most recent request.
.ie n .IP """get_error""" 4
.el .IP "\f(CWget_error\fR" 4
.IX Item "get_error"
If the last request returned an error, the hashref containing the error message can be
retrieved with \f(CW\*(C`get_error\*(C'\fR. This will provide some additional debugging information in
addition to the http code and message above.
.SS "\s-1STATUS\s0 \s-1METHODS\s0"
.IX Subsection "STATUS METHODS"
.ie n .IP """update(...)""" 4
.el .IP "\f(CWupdate(...)\fR" 4
.IX Item "update(...)"
Set your current status. This returns a hashref containing your most
recent status. Returns undef if an error occurs.
.Sp
The method accepts a hashref containing one or two arguments.
.RS 4
.ie n .IP """status""" 4
.el .IP "\f(CWstatus\fR" 4
.IX Item "status"
\&\s-1REQUIRED\s0. The text of your status update.
.ie n .IP """in_reply_to_status_id""" 4
.el .IP "\f(CWin_reply_to_status_id\fR" 4
.IX Item "in_reply_to_status_id"
\&\s-1OPTIONAL\s0. The \s-1ID\s0 of an existing status that the status to be posted is in reply to.
This implicitly sets the in_reply_to_user_id attribute of the resulting status to
the user \s-1ID\s0 of the message being replied to. Invalid/missing status IDs will be ignored.
.RE
.RS 4
.RE
.ie n .IP """update_twittervision($location)""" 4
.el .IP "\f(CWupdate_twittervision($location)\fR" 4
.IX Item "update_twittervision($location)"
If the \f(CW\*(C`twittervision\*(C'\fR argument is passed to \f(CW\*(C`new\*(C'\fR when the object is
created, this method will update your location setting at
twittervision.com.
.Sp
If the \f(CW\*(C`twittervision\*(C'\fR arg is not set at object creation, this method will
return an empty hashref, otherwise it will return a hashref containing the
location data.
.ie n .IP """show_status($id)""" 4
.el .IP "\f(CWshow_status($id)\fR" 4
.IX Item "show_status($id)"
Returns status of a single tweet. The status' author will be returned inline.
.Sp
The argument is the \s-1ID\s0 or email address of the twitter user to pull, and is \s-1REQUIRED\s0.
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R".
.ie n .IP """destroy_status($id)""" 4
.el .IP "\f(CWdestroy_status($id)\fR" 4
.IX Item "destroy_status($id)"
Destroys the status specified by the required \s-1ID\s0 parameter. The
authenticating user must be the author of the specified status.
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R".
.ie n .IP """user_timeline(...)""" 4
.el .IP "\f(CWuser_timeline(...)\fR" 4
.IX Item "user_timeline(...)"
This returns an arrayref to an array of hashrefs, containing the 20 (or more) posts from
either the authenticating user (if no argument is passed), or from a specific user if
the id field is passed in a hashref.
.Sp
Accepts an optional argument of a hashref:
.RS 4
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
\&\s-1OPTIONAL:\s0 \s-1ID\s0 or email address of a user other than the authenticated user, in 
order to retrieve that user's user_timeline.
.ie n .IP """since""" 4
.el .IP "\f(CWsince\fR" 4
.IX Item "since"
\&\s-1OPTIONAL:\s0 Narrows the returned results to just those statuses created after the
specified HTTP-formatted date.
.ie n .IP """since_id""" 4
.el .IP "\f(CWsince_id\fR" 4
.IX Item "since_id"
\&\s-1OPTIONAL:\s0 Narrows the returned results to just those statuses created after the
specified \s-1ID\s0.
.ie n .IP """count""" 4
.el .IP "\f(CWcount\fR" 4
.IX Item "count"
\&\s-1OPTIONAL:\s0 Narrows the returned results to a certain number of statuses. This is limited to 200.
.ie n .IP """page""" 4
.el .IP "\f(CWpage\fR" 4
.IX Item "page"
\&\s-1OPTIONAL:\s0 Gets the 20 next most recent statuses from the authenticating user and that user's
friends, eg \*(L"page=3\*(R".
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R". If passed as a string, no other args can be specified.
.RE
.ie n .IP """public_timeline()""" 4
.el .IP "\f(CWpublic_timeline()\fR" 4
.IX Item "public_timeline()"
This returns an arrayref to an array of hashrefs, containing the information and status of
each of the last 20 posts by all non-private twitter users.
.ie n .IP """friends_timeline(...)""" 4
.el .IP "\f(CWfriends_timeline(...)\fR" 4
.IX Item "friends_timeline(...)"
Returns the 20 most recent statuses posted from the authenticating user and that user's 
friends. It's also possible to request another user's friends_timeline via the id parameter below.
.Sp
If called with no arguments, returns the friends' timeline for the authenticating user.
.Sp
Accepts an optional hashref as an argument:
.RS 4
.ie n .IP """since""" 4
.el .IP "\f(CWsince\fR" 4
.IX Item "since"
\&\s-1OPTIONAL:\s0 Narrows the returned results to just those statuses created after the
specified HTTP-formatted date.
.ie n .IP """since_id""" 4
.el .IP "\f(CWsince_id\fR" 4
.IX Item "since_id"
\&\s-1OPTIONAL:\s0 Narrows the returned results to just those statuses created after the
specified \s-1ID\s0.
.ie n .IP """count""" 4
.el .IP "\f(CWcount\fR" 4
.IX Item "count"
Narrows the returned results to a certain number of statuses. This is limited to 200.
.ie n .IP """page""" 4
.el .IP "\f(CWpage\fR" 4
.IX Item "page"
Gets the 20 next most recent statuses from the authenticating user and that user's
friends, eg \*(L"page=3\*(R".
.RE
.RS 4
.RE
.ie n .IP """replies(...)""" 4
.el .IP "\f(CWreplies(...)\fR" 4
.IX Item "replies(...)"
This returns an arrayref to an array of hashrefs, containing the information and status of
each of the last 20 replies (status updates prefixed with \f(CW@username\fR
posted by users who are friends with the user being replied to) to the
authenticating user.
.RS 4
.ie n .IP """since""" 4
.el .IP "\f(CWsince\fR" 4
.IX Item "since"
\&\s-1OPTIONAL:\s0 Narrows the returned results to just those replies created after the specified HTTP-formatted date,
up to 24 hours old.
.ie n .IP """since_id""" 4
.el .IP "\f(CWsince_id\fR" 4
.IX Item "since_id"
\&\s-1OPTIONAL:\s0 Returns only statuses with an \s-1ID\s0 greater than (that is, more recent than) the specified \s-1ID\s0.
.ie n .IP """page""" 4
.el .IP "\f(CWpage\fR" 4
.IX Item "page"
\&\s-1OPTIONAL:\s0 Gets the 20 next most recent replies.
.RE
.RS 4
.RE
.SS "\s-1USER\s0 \s-1METHODS\s0"
.IX Subsection "USER METHODS"
.ie n .IP """friends()""" 4
.el .IP "\f(CWfriends()\fR" 4
.IX Item "friends()"
This returns an arrayref to an array of hashrefs. Each hashref contains the information and status of those you
have marked as friends in twitter. Returns undef if an error occurs.
.Sp
Takes a hashref as an arg:
.RS 4
.ie n .IP """since""" 4
.el .IP "\f(CWsince\fR" 4
.IX Item "since"
\&\s-1OPTIONAL:\s0 Narrows the returned results to just those friendships created after the specified HTTP-formatted date,
up to 24 hours old.
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
\&\s-1OPTIONAL:\s0 User id or email address of a user other than the authenticated user,
in order to retrieve that user's friends.
.ie n .IP """page""" 4
.el .IP "\f(CWpage\fR" 4
.IX Item "page"
\&\s-1OPTIONAL:\s0 Gets the 100 next most recent friends, eg \*(L"page=3\*(R".
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R". If passed as a string, no other args can be specified.
.RE
.ie n .IP """followers()""" 4
.el .IP "\f(CWfollowers()\fR" 4
.IX Item "followers()"
his returns an arrayref to an array of hashrefs. Each hashref contains the information 
and status of those who follow your status in twitter. Returns undef if an error occurs.
.Sp
If called without an argument returns the followers for the authenticating user, but can
pull followers for a specific \s-1ID\s0.
.Sp
Accepts an optional hashref for arguments:
.RS 4
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
\&\s-1OPTIONAL:\s0 The \s-1ID\s0 or screen name of the user for whom to request a list of followers.
.ie n .IP """page""" 4
.el .IP "\f(CWpage\fR" 4
.IX Item "page"
\&\s-1OPTIONAL:\s0 Retrieves the next 100 followers.
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R". If passed as a string, no other args can be specified.
.RE
.ie n .IP """show_user()""" 4
.el .IP "\f(CWshow_user()\fR" 4
.IX Item "show_user()"
Returns a hashref containing extended information of a single user.
.Sp
The argument is a hashref containing either the user's \s-1ID\s0 or email address. It is required
to pass either one or the other, but not both:
.RS 4
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
The \s-1ID\s0 or screen name of the user.
.ie n .IP """email""" 4
.el .IP "\f(CWemail\fR" 4
.IX Item "email"
The email address of the user. If \f(CW\*(C`email\*(C'\fR is specified, \f(CW\*(C`id\*(C'\fR is ignored.
.RE
.RS 4
.Sp
If the \f(CW\*(C`twittervision\*(C'\fR argument is passed to \f(CW\*(C`new\*(C'\fR when the object is
created, this method will include the location information for the user
from twittervision.com, placing it inside the returned hashref under the
key \f(CW\*(C`twittervision\*(C'\fR.
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R". If passed as a string, no other args can be specified.
.RE
.SS "\s-1DIRECT\s0 \s-1MESSAGE\s0 \s-1METHODS\s0"
.IX Subsection "DIRECT MESSAGE METHODS"
.ie n .IP """direct_messages()""" 4
.el .IP "\f(CWdirect_messages()\fR" 4
.IX Item "direct_messages()"
Returns a list of the direct messages sent to the authenticating user.
.Sp
Accepts an optional hashref for arguments:
.RS 4
.ie n .IP """page""" 4
.el .IP "\f(CWpage\fR" 4
.IX Item "page"
\&\s-1OPTIONAL:\s0 Retrieves the 20 next most recent direct messages.
.ie n .IP """since""" 4
.el .IP "\f(CWsince\fR" 4
.IX Item "since"
\&\s-1OPTIONAL:\s0 Narrows the returned results to just those statuses created after the
specified HTTP-formatted date.
.ie n .IP """since_id""" 4
.el .IP "\f(CWsince_id\fR" 4
.IX Item "since_id"
\&\s-1OPTIONAL:\s0 Narrows the returned results to just those statuses created after the
specified \s-1ID\s0.
.RE
.RS 4
.RE
.ie n .IP """sent_direct_messages()""" 4
.el .IP "\f(CWsent_direct_messages()\fR" 4
.IX Item "sent_direct_messages()"
Returns a list of the direct messages sent by the authenticating user.
.Sp
Accepts an optional hashref for arguments:
.RS 4
.ie n .IP """page""" 4
.el .IP "\f(CWpage\fR" 4
.IX Item "page"
\&\s-1OPTIONAL:\s0 Retrieves the 20 next most recent direct messages.
.ie n .IP """since""" 4
.el .IP "\f(CWsince\fR" 4
.IX Item "since"
\&\s-1OPTIONAL:\s0 Narrows the returned results to just those statuses created after the
specified HTTP-formatted date.
.ie n .IP """since_id""" 4
.el .IP "\f(CWsince_id\fR" 4
.IX Item "since_id"
\&\s-1OPTIONAL:\s0 Narrows the returned results to just those statuses created after the
specified \s-1ID\s0.
.RE
.RS 4
.RE
.ie n .IP """new_direct_message($args)""" 4
.el .IP "\f(CWnew_direct_message($args)\fR" 4
.IX Item "new_direct_message($args)"
Sends a new direct message to the specified user from the authenticating user.
.Sp
\&\s-1REQUIRES\s0 an argument of a hashref:
.RS 4
.ie n .IP """user""" 4
.el .IP "\f(CWuser\fR" 4
.IX Item "user"
\&\s-1REQUIRED:\s0 \s-1ID\s0 or email address of user to send direct message to.
.ie n .IP """text""" 4
.el .IP "\f(CWtext\fR" 4
.IX Item "text"
\&\s-1REQUIRED:\s0 Text of direct message.
.RE
.RS 4
.RE
.ie n .IP """destroy_direct_message($id)""" 4
.el .IP "\f(CWdestroy_direct_message($id)\fR" 4
.IX Item "destroy_direct_message($id)"
Destroys the direct message specified in the required \s-1ID\s0 parameter. The
authenticating user must be the recipient of the specified direct message.
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R".
.SS "\s-1FRIENDSHIP\s0 \s-1METHODS\s0"
.IX Subsection "FRIENDSHIP METHODS"
.ie n .IP """create_friend(...)""" 4
.el .IP "\f(CWcreate_friend(...)\fR" 4
.IX Item "create_friend(...)"
Befriends the user specified in the id parameter as the authenticating user.
Returns a hashref containing the befriended user's information when successful.
.RS 4
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
\&\s-1REQUIRED\s0. The \s-1ID\s0 or screen name of the user to befriend.
.ie n .IP """follow""" 4
.el .IP "\f(CWfollow\fR" 4
.IX Item "follow"
\&\s-1OPTIONAL\s0. Enable notifications for the target user in addition to becoming friends.
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R". If passed as a string, no other args can be specified.
.RE
.ie n .IP """destroy_friend($id)""" 4
.el .IP "\f(CWdestroy_friend($id)\fR" 4
.IX Item "destroy_friend($id)"
Discontinues friendship with the user specified in the \s-1ID\s0 parameter as the
authenticating user. Returns a hashref containing the unfriended user's information 
when successful.
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R".
.ie n .IP """relationship_exists($user_a, $user_b)""" 4
.el .IP "\f(CWrelationship_exists($user_a, $user_b)\fR" 4
.IX Item "relationship_exists($user_a, $user_b)"
Tests if friendship exists between the two users specified as arguments. Both arguments
are \s-1REQUIRED\s0.
.SS "\s-1SOCIAL\s0 \s-1GRAPH\s0 \s-1METHODS\s0"
.IX Subsection "SOCIAL GRAPH METHODS"
.ie n .IP """friends_ids()""" 4
.el .IP "\f(CWfriends_ids()\fR" 4
.IX Item "friends_ids()"
Returns an arrayref to an array of numeric IDs for every user the specified user is following.
Returns undef if an error occurs.
.Sp
Takes a hashref as an arg:
.RS 4
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
\&\s-1OPTIONAL:\s0 User id or email address of a user other than the authenticated user,
in order to retrieve that user's friends.
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a
hashref with a key called \*(L"id\*(R". If passed as a string, no other args can be specified.
If no args are passed, returns the list for the authenticating user.
.RE
.ie n .IP """followers_ids()""" 4
.el .IP "\f(CWfollowers_ids()\fR" 4
.IX Item "followers_ids()"
Returns an arrayref to an array of numeric IDs for every user the specified user is followed
by. Returns undef if an error occurs.
.Sp
Accepts an optional hashref for arguments:
.RS 4
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
\&\s-1OPTIONAL:\s0 The \s-1ID\s0 or screen name of the user for whom to request a list of followers.
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a
hashref with a key called \*(L"id\*(R". If passed as a string, no other args can be specified.
If no args are passed, returns the list for the authenticating user.
.RE
.SS "\s-1ACCOUNT\s0 \s-1METHODS\s0"
.IX Subsection "ACCOUNT METHODS"
.ie n .IP """verify_credentials()""" 4
.el .IP "\f(CWverify_credentials()\fR" 4
.IX Item "verify_credentials()"
Returns a hashref containing the authenticating user's extended information if the login
credentials are correct.
.ie n .IP """end_session()""" 4
.el .IP "\f(CWend_session()\fR" 4
.IX Item "end_session()"
Ends the session of the authenticating user, returning a null cookie. Use
this method to sign users out of client-facing applications like widgets.
.ie n .IP """update_location($location)""" 4
.el .IP "\f(CWupdate_location($location)\fR" 4
.IX Item "update_location($location)"
\&\s-1WARNING:\s0 This method has been deprecated in favor of the update_profile method below. 
It still functions today but will be removed in future versions.
.Sp
Updates the location attribute of the authenticating user, as displayed on
the side of their profile and returned in various \s-1API\s0 methods.
.ie n .IP """update_delivery_device($device)""" 4
.el .IP "\f(CWupdate_delivery_device($device)\fR" 4
.IX Item "update_delivery_device($device)"
Sets which device Twitter delivers updates to for the authenticating user.
\&\f(CW$device\fR is required and must be one of: \*(L"sms\*(R", \*(L"im\*(R", or \*(L"none\*(R". Sending none as the device
parameter will disable \s-1IM\s0 or \s-1SMS\s0 updates.
.ie n .IP """update_profile_colors(...)""" 4
.el .IP "\f(CWupdate_profile_colors(...)\fR" 4
.IX Item "update_profile_colors(...)"
Sets one or more hex values that control the color scheme of the authenticating user's profile
page on twitter.com. These values are also returned in the show_user method.
.Sp
This method takes a hashref as an argument, with the following optional fields 
containing a hex color string.
.RS 4
.ie n .IP """profile_background_color""" 4
.el .IP "\f(CWprofile_background_color\fR" 4
.IX Item "profile_background_color"
.PD 0
.ie n .IP """profile_text_color""" 4
.el .IP "\f(CWprofile_text_color\fR" 4
.IX Item "profile_text_color"
.ie n .IP """profile_link_color""" 4
.el .IP "\f(CWprofile_link_color\fR" 4
.IX Item "profile_link_color"
.ie n .IP """profile_sidebar_fill_color""" 4
.el .IP "\f(CWprofile_sidebar_fill_color\fR" 4
.IX Item "profile_sidebar_fill_color"
.ie n .IP """profile_sidebar_border_color""" 4
.el .IP "\f(CWprofile_sidebar_border_color\fR" 4
.IX Item "profile_sidebar_border_color"
.RE
.RS 4
.RE
.ie n .IP """update_profile_image(...)"")" 4
.el .IP "\f(CWupdate_profile_image(...)\fR)" 4
.IX Item "update_profile_image(...))"
.PD
Updates the authenticating user's profile image.
.Sp
This takes as a required argument a \s-1GIF\s0, \s-1JPG\s0 or \s-1PNG\s0 image, no larger than 700k in size. 
Expects raw image data, not a pathname or \s-1URL\s0 to the image.
.ie n .IP """update_profile_background_image(...)"")" 4
.el .IP "\f(CWupdate_profile_background_image(...)\fR)" 4
.IX Item "update_profile_background_image(...))"
Updates the authenticating user's profile background image.
.Sp
This takes as a required argument a \s-1GIF\s0, \s-1JPG\s0 or \s-1PNG\s0 image, no larger than 800k in size. 
Expects raw image data, not a pathname or \s-1URL\s0 to the image.
.ie n .IP """rate_limit_status""" 4
.el .IP "\f(CWrate_limit_status\fR" 4
.IX Item "rate_limit_status"
Returns the remaining number of \s-1API\s0 requests available to the authenticating
user before the \s-1API\s0 limit is reached for the current hour. Calls to
rate_limit_status require authentication, but will not count against
the rate limit.
.ie n .IP """update_profile""" 4
.el .IP "\f(CWupdate_profile\fR" 4
.IX Item "update_profile"
Sets values that users are able to set under the \*(L"Account\*(R" tab of their settings page.
.Sp
Takes as an argument a hashref containing fields to be updated. Only the parameters specified
will be updated. For example, to only update the \*(L"name\*(R" attribute include only that parameter 
in the hashref.
.RS 4
.ie n .IP """name""" 4
.el .IP "\f(CWname\fR" 4
.IX Item "name"
\&\s-1OPTIONAL:\s0 Twitter user's name. Maximum of 40 characters.
.ie n .IP """email""" 4
.el .IP "\f(CWemail\fR" 4
.IX Item "email"
\&\s-1OPTIONAL:\s0 Email address. Maximum of 40 characters. Must be a valid email address.
.ie n .IP """url""" 4
.el .IP "\f(CWurl\fR" 4
.IX Item "url"
\&\s-1OPTIONAL:\s0 Homepage \s-1URL\s0. Maximum of 100 characters. Will be prepended with \*(L"http://\*(R" if not present.
.ie n .IP """location""" 4
.el .IP "\f(CWlocation\fR" 4
.IX Item "location"
\&\s-1OPTIONAL:\s0 Geographic location. Maximum of 30 characters. The contents are not normalized or 
geocoded in any way.
.ie n .IP """description""" 4
.el .IP "\f(CWdescription\fR" 4
.IX Item "description"
\&\s-1OPTIONAL:\s0 Personal description. Maximum of 160 characters.
.RE
.RS 4
.RE
.SS "\s-1FAVORITE\s0 \s-1METHODS\s0"
.IX Subsection "FAVORITE METHODS"
.ie n .IP """favorites()""" 4
.el .IP "\f(CWfavorites()\fR" 4
.IX Item "favorites()"
Returns the 20 most recent favorite statuses for the authenticating user or user
specified by the \s-1ID\s0 parameter.
.Sp
This takes a hashref as an argument:
.RS 4
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
\&\s-1OPTIONAL\s0. The \s-1ID\s0 or screen name of the user for whom to request a list of favorite
statuses.
.ie n .IP """page""" 4
.el .IP "\f(CWpage\fR" 4
.IX Item "page"
\&\s-1OPTIONAL:\s0 Gets the 20 next most recent favorite statuses, eg \*(L"page=3\*(R".
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R". If passed as a string, no other args can be specified.
.RE
.ie n .IP """create_favorite()""" 4
.el .IP "\f(CWcreate_favorite()\fR" 4
.IX Item "create_favorite()"
Sets the specified \s-1ID\s0 as a favorite for the authenticating user.
.Sp
This takes a hashref as an argument:
.RS 4
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
\&\s-1REQUIRED:\s0 The \s-1ID\s0 of the status to favorite.
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R".
.RE
.ie n .IP """destroy_favorite()""" 4
.el .IP "\f(CWdestroy_favorite()\fR" 4
.IX Item "destroy_favorite()"
Removes the specified \s-1ID\s0 as a favorite for the authenticating user.
.Sp
This takes a hashref as an argument:
.RS 4
.ie n .IP """id"" \s-1REQUIRED\s0. The \s-1ID\s0 of the status to un-favorite." 4
.el .IP "\f(CWid\fR \s-1REQUIRED\s0. The \s-1ID\s0 of the status to un-favorite." 4
.IX Item "id REQUIRED. The ID of the status to un-favorite."
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R".
.RE
.SS "\s-1NOTIFICATION\s0 \s-1METHODS\s0"
.IX Subsection "NOTIFICATION METHODS"
.ie n .IP """enable_notifications()""" 4
.el .IP "\f(CWenable_notifications()\fR" 4
.IX Item "enable_notifications()"
Enables notifications for updates from the specified user to the authenticating user.
Returns the specified user when successful.
.Sp
This takes a hashref as an argument:
.RS 4
.ie n .IP """id"" \s-1REQUIRED:\s0 The \s-1ID\s0 or screen name of the user to receive notices from." 4
.el .IP "\f(CWid\fR \s-1REQUIRED:\s0 The \s-1ID\s0 or screen name of the user to receive notices from." 4
.IX Item "id REQUIRED: The ID or screen name of the user to receive notices from."
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R".
.RE
.ie n .IP """disable_notifications()""" 4
.el .IP "\f(CWdisable_notifications()\fR" 4
.IX Item "disable_notifications()"
Disables notifications for updates from the specified user to the authenticating user.
Returns the specified user when successful.
.Sp
This takes a hashref as an argument:
.RS 4
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
\&\s-1REQUIRED:\s0 The \s-1ID\s0 or screen name of the user to stop receiving notices from.
.RE
.RS 4
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R".
.RE
.SS "\s-1BLOCK\s0 \s-1METHODS\s0"
.IX Subsection "BLOCK METHODS"
.ie n .IP """create_block($id)""" 4
.el .IP "\f(CWcreate_block($id)\fR" 4
.IX Item "create_block($id)"
Blocks the user id passed as an argument from the authenticating user.
Returns a hashref containing the user information for the blocked user when successful.
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R".
.Sp
You can find more information about blocking at
<http://help.twitter.com/index.php?pg=kb.page&id=69>.
.ie n .IP """destroy_block($id)""" 4
.el .IP "\f(CWdestroy_block($id)\fR" 4
.IX Item "destroy_block($id)"
Un-blocks the user id passed as an argument from the authenticating user.
Returns a hashref containing the user information for the blocked user when successful.
.Sp
This method can take the \*(L"id\*(R" argument passed to it either as a single string, or in a hashref with a key
called \*(L"id\*(R".
.SS "\s-1SEARCH\s0"
.IX Subsection "SEARCH"
As of version 2.00, Net::Twitter implements the search functionality of Twitter,
using code derived from Net::Twitter::Search by Brenda Wallace.
.ie n .IP """search()""" 4
.el .IP "\f(CWsearch()\fR" 4
.IX Item "search()"
Performs a search on http://search.twitter.com for your query string.
.Sp
This returns a hashref which is slightly different than the other methods such as public_timeline.
The hashref contains a key named \f(CW\*(C`results\*(C'\fR which contains an arrayref to an array of hashrefs, each
hashref containing a single post. These hashrefs do not include the \*(L"user\*(R" item with the 
posting user's information such as the *_timeline methods do.
.Sp
This method takes a required hashref as an argument:
.RS 4
.ie n .IP """q""" 4
.el .IP "\f(CWq\fR" 4
.IX Item "q"
.PD 0
.ie n .IP """query""" 4
.el .IP "\f(CWquery\fR" 4
.IX Item "query"
.PD
\&\s-1REQUIRED:\s0 Specifies the string to search for. This can include any of the Twitter search operators listed
at <http://search.twitter.com/operators>. Please see below for information about backwards compatibility
with Net::Twitter::Search.
.Sp
Both q and query are aliases to the same argument. Specifying both will use
the value specified for \*(L"query\*(R".
.Sp
Please note that you cannot use the \*(L"near\*(R" search operator to specify arbitrary Lat/Long locations. 
For this use the \f(CW\*(C`geocode\*(C'\fR argument below.
.ie n .IP """lang""" 4
.el .IP "\f(CWlang\fR" 4
.IX Item "lang"
\&\s-1OPTIONAL:\s0 Restricts results to a specific language, given by an \s-1ISO\s0 639\-1 code. For example {'lang' => 'en'}
.ie n .IP """rpp""" 4
.el .IP "\f(CWrpp\fR" 4
.IX Item "rpp"
\&\s-1OPTIONAL:\s0 Sets the number of posts to return per page, up to a max of 100.
.ie n .IP """page""" 4
.el .IP "\f(CWpage\fR" 4
.IX Item "page"
\&\s-1OPTIONAL:\s0 Sets the page number (starting at 1) to return, up to a max of roughly 
1500 results (based on rpp * page)
.ie n .IP """since_id""" 4
.el .IP "\f(CWsince_id\fR" 4
.IX Item "since_id"
\&\s-1OPTIONAL:\s0 Restricts returned posts to those status ids greater than the given id.
.ie n .IP """geocode""" 4
.el .IP "\f(CWgeocode\fR" 4
.IX Item "geocode"
\&\s-1OPTIONAL:\s0 Returns posts by users located within the radius of the given latitude/longitude, where the user's 
location is taken from their Twitter profile. The format of the parameter value is \*(L"latitide,longitude,radius\*(R", 
with radius units specified as either \*(L"mi\*(R" (miles) or \*(L"km\*(R" (kilometers).
.ie n .IP """show_user""" 4
.el .IP "\f(CWshow_user\fR" 4
.IX Item "show_user"
\&\s-1OPTIONAL:\s0 When set to a true boolean value \f(CW\*(C`show_user\*(C'\fR will prepend \*(L"<username>:\*(R" to the beginning of the text of
each post returned.
.RE
.RS 4
.RE
.IP "\s-1BACKWARDS\s0 \s-1COMPATIBILITY\s0 \s-1WITH\s0 Net::Twitter::Search" 4
.IX Item "BACKWARDS COMPATIBILITY WITH Net::Twitter::Search"
In order to maintain backwards compatibility with Net::Twitter::Search, the query/q arguments can be specified
as plain text:
.Sp
.Vb 1
\&    $res = $twit\->search("Farkle McFancypants")
.Ve
.Sp
In addition, you can, in this case, specify all of the above arguments in a hashref as the second argument
to the search method.
.Sp
.Vb 1
\&    $res = $twit\->search("Farkle McFancypants", {lang => "en"})
.Ve
.Sp
Any query/q arguments in the hashref passed in this manner will be ignored, and the module will
proceed using the string passed in the first argument as the query.
.SS "\s-1HELP\s0 \s-1METHODS\s0"
.IX Subsection "HELP METHODS"
.ie n .IP """test()""" 4
.el .IP "\f(CWtest()\fR" 4
.IX Item "test()"
Returns the string \*(L"ok\*(R" in the requested format with a 200 \s-1OK\s0 \s-1HTTP\s0 status
code.
.ie n .IP """downtime_schedule()""" 4
.el .IP "\f(CWdowntime_schedule()\fR" 4
.IX Item "downtime_schedule()"
Returns the same text displayed on <http://twitter.com/home> when a
maintenance window is scheduled.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-net\-twitter@rt.cpan.org\*(C'\fR, or through the web interface at
https://rt.cpan.org/Dist/Display.html?Queue=Net\-Twitter <https://rt.cpan.org/Dist/Display.html?Queue=Net-Twitter>.
.PP
You can also join the Net::Twitter \s-1IRC\s0 channel at irc://irc.perl.org/net\-twitter
.PP
You can track Net::Twitter development at http://github.com/ct/net\-twitter/tree/2.0
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Thompson <cpan@cthompson.com>
.PP
The test framework for Net::Twitter was written by Marc \*(L"semifor\*(R" Mims.
.PP
The framework of this module is shamelessly stolen from Net::AIML. Big
ups to Chris \*(L"perigrin\*(R" Prather for that.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2009, Chris Thompson <cpan@cthompson.com>. All rights
reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE\s0 \s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1LICENSED\s0 \s-1FREE\s0 \s-1OF\s0 \s-1CHARGE\s0, \s-1THERE\s0 \s-1IS\s0 \s-1NO\s0 \s-1WARRANTY\s0
\&\s-1FOR\s0 \s-1THE\s0 \s-1SOFTWARE\s0, \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0. \s-1EXCEPT\s0 \s-1WHEN\s0
\&\s-1OTHERWISE\s0 \s-1STATED\s0 \s-1IN\s0 \s-1WRITING\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1AND/OR\s0 \s-1OTHER\s0 \s-1PARTIES\s0
\&\s-1PROVIDE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0, \s-1EITHER\s0
\&\s-1EXPRESSED\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. \s-1THE\s0
\&\s-1ENTIRE\s0 \s-1RISK\s0 \s-1AS\s0 \s-1TO\s0 \s-1THE\s0 \s-1QUALITY\s0 \s-1AND\s0 \s-1PERFORMANCE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1WITH\s0
\&\s-1YOU\s0. \s-1SHOULD\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1PROVE\s0 \s-1DEFECTIVE\s0, \s-1YOU\s0 \s-1ASSUME\s0 \s-1THE\s0 \s-1COST\s0 \s-1OF\s0 \s-1ALL\s0
\&\s-1NECESSARY\s0 \s-1SERVICING\s0, \s-1REPAIR\s0, \s-1OR\s0 \s-1CORRECTION\s0.
.PP
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0 \s-1OR\s0 \s-1AGREED\s0 \s-1TO\s0 \s-1IN\s0 \s-1WRITING\s0
\&\s-1WILL\s0 \s-1ANY\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0, \s-1OR\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1WHO\s0 \s-1MAY\s0 \s-1MODIFY\s0 \s-1AND/OR\s0
\&\s-1REDISTRIBUTE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1AS\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1THE\s0 \s-1ABOVE\s0 \s-1LICENCE\s0, \s-1BE\s0
\&\s-1LIABLE\s0 \s-1TO\s0 \s-1YOU\s0 \s-1FOR\s0 \s-1DAMAGES\s0, \s-1INCLUDING\s0 \s-1ANY\s0 \s-1GENERAL\s0, \s-1SPECIAL\s0, \s-1INCIDENTAL\s0,
\&\s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OR\s0 \s-1INABILITY\s0 \s-1TO\s0 \s-1USE\s0
\&\s-1THE\s0 \s-1SOFTWARE\s0 (\s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1LOSS\s0 \s-1OF\s0 \s-1DATA\s0 \s-1OR\s0 \s-1DATA\s0 \s-1BEING\s0
\&\s-1RENDERED\s0 \s-1INACCURATE\s0 \s-1OR\s0 \s-1LOSSES\s0 \s-1SUSTAINED\s0 \s-1BY\s0 \s-1YOU\s0 \s-1OR\s0 \s-1THIRD\s0 \s-1PARTIES\s0 \s-1OR\s0 A
\&\s-1FAILURE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1TO\s0 \s-1OPERATE\s0 \s-1WITH\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1SOFTWARE\s0), \s-1EVEN\s0 \s-1IF\s0
\&\s-1SUCH\s0 \s-1HOLDER\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1HAS\s0 \s-1BEEN\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0
\&\s-1SUCH\s0 \s-1DAMAGES\s0.
